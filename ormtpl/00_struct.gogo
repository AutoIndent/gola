// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}
{{$table := .}}
import (
	"database/sql"
	"strings"

	"github.com/olachat/gola/corelib"

	{{.Imports}}
)

var _db *sql.DB

func Setup(db *sql.DB) {
	_db = db
}

// {{.ClassName}} represents {{.Name}} table
type {{.ClassName}} struct {
	{{- range .Columns }}
	// {{.Comment}} {{.DBType}}
	{{.GoName}}
	{{- end }}
}

type {{.ClassName}}Table struct{}

func (*{{.ClassName}}Table) GetTableName() string {
	return "{{.Name}}"
}

var table *{{.ClassName}}Table

// Fetch methods
func Fetch{{.ClassName}}ById(id int) *{{.ClassName}} {
	return corelib.FetchById[{{.ClassName}}](id, _db)
}

func FetchById[T any](id int) *T {
	return corelib.FetchById[T](id, _db)
}

func Fetch{{.ClassName}}ByIds(ids []int) []*{{.ClassName}} {
	return corelib.FetchByIds[{{.ClassName}}](ids, _db)
}

func FetchByIds[T any](ids []int) []*T {
	return corelib.FetchByIds[T](ids, _db)
}

// Column types

{{- range .Columns }}
	{{- if .IsEnum}}
type {{$table.ClassName}}{{.GoName}} string
const (
	{{.GetEnumConst}}
)
	{{- end }}
	{{- if .IsSet}}
type {{$table.ClassName}}{{.GoName}} string
const (
	{{.GetSetConst}}
)
	{{- end }}
{{- end }}

{{- range .Columns }}

// {{.GoName}} field
// {{.Comment}}
{{- if .IsSet}}
type {{.GoName}} struct {
	_updated bool
	val string
}

func (c *{{.GoName}}) Get{{.GoName}}() []{{.GoType}} {
	strSlice := strings.Split(c.val, ",")
	valSlice := make([]{{.GoType}}, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, {{.GoType}}(strings.ToLower(s)))
	}
	return valSlice
}

func (c *{{.GoName}}) Set{{.GoName}}(val []{{.GoType}}) bool {
	strSlice := make([]string, 0, len(val))
	for _, v := range val {
		strSlice = append(strSlice, string(v))
	}
	c.val = strings.Join(strSlice, ",")
	return true
}
{{else}}
type {{.GoName}} struct {
	_updated bool
	val {{.GoType}}
}

func (c *{{.GoName}}) Get{{.GoName}}() {{.GoType}} {
	return c.val
}

func (c *{{.GoName}}) Set{{.GoName}}(val {{.GoType}}) bool {
	if c.val == val {
		return false
	}
	c._updated = true
	c.val = val
	return true
}
{{end}}
func (c *{{.GoName}}) GetColumnName() string {
	return "{{.Name}}"
}

func (c *{{.GoName}}) IsUpdated() bool {
	return c._updated
}

func (c *{{.GoName}}) IsPrimaryKey() bool {
	return {{.IsPrimaryKey}}
}

func (c *{{.GoName}}) GetValPointer() interface{} {
	return &c.val
}

func (c *{{.GoName}}) GetTableType() corelib.TableType {
	return table
}
{{- end }}

func New{{.ClassName}}() *{{.ClassName}} {
	return &{{.ClassName}}{
	{{- range .Columns }}
	{{- if .HasDefault}}
	{{.GoName}}{val:{{.GoDefaultValue}}},
	{{- else}}
	{{.GoName}}{},
	{{- end }}
	{{- end }}
	}
}

func (c *{{.ClassName}}) Insert() error {
	sql := `INSERT INTO {{.Name}} (
		{{- range $i, $c := .NonPrimaryColumns }}
		{{- if $i}}, {{end}}
		{{- $c.Name}}
		{{- end }}) values (
		{{- range $i, $c := .NonPrimaryColumns }}
		{{- if $i}}, {{end}}?
		{{- end }})`

	result, err := corelib.Exec(sql, _db, {{- range $i, $c := .NonPrimaryColumns }}
	{{- if $i}}, {{end}}c.Get{{$c.GoName}}()
	{{- end }})

	if err != nil {
		return err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return err
	}

	c.Set{{.GetPrimaryKey}}(int(id))
	return nil
}

func (c *{{.ClassName}}) Update() (bool, error) {
	var updatedFields []string
	var params []interface{}
	{{- range $i, $c := .NonPrimaryColumns }}
	if c.{{ $c.GoName }}.IsUpdated() {
		updatedFields = append(updatedFields, "{{ $c.Name }} = ?")
		params = append(params, c.Get{{ $c.GoName }}())
	}
	{{- end }}

	sql := `update {{.Name}} set `

	if len(updatedFields) == 0 {
		return false, nil
	}

	sql = sql + strings.Join(updatedFields, ",") + " where {{.GetPrimaryKeyName}} = ?"
	params = append(params, c.Get{{.GetPrimaryKey}}())

	_, err := corelib.Exec(sql, _db, params...)
	if err != nil {
		return false, err
	}

	return true, nil
}
