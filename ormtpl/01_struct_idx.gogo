// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"strings"

	"github.com/olachat/gola/coredb"
)

type orderBy int

type idxQuery[T any] struct {
	whereSql string
	limitSql string
	orders []string
	whereParams []any
}

// order by enum & interface
const (
{{- range $i, $col := .Columns }}
	{{- if eq $i 0 }}
	{{$col.GoName}}Asc orderBy = iota
	{{$col.GoName}}Desc
	{{- else }}
	{{$col.GoName}}Asc
	{{$col.GoName}}Desc
	{{- end }}
{{- end }}
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) coredb.ReadQuery[T] {
	q.orders = make([]string, len(args))
	for i, arg := range args {
		switch arg{
{{- range $i, $col := .Columns }}
		case {{$col.GoName}}Asc:
			q.orders[i] = "{{ $col.Name}} asc"
		case {{$col.GoName}}Desc:
			q.orders[i] = "{{ $col.Name}} desc"
{{- end }}
		}
	}
	return q
}

func (q *idxQuery[T]) All() []*T {
	result, _ := coredb.Find[T](q, _db)
	return result
}

func (q *idxQuery[T]) Limit(offset, count int) []*T {
	q.limitSql = fmt.Sprintf(" limit %d, %d", offset, count)
	result, _ := coredb.Find[T](q, _db)
	return result
}

type order[T any] interface {
	OrderBy(args ...orderBy) coredb.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	coredb.ReadQuery[T]
}

type iQuery[T any] interface {
{{- range $i, $col := .FirstIdxColumns }}
	Where{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T]
	Where{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T]
{{- end }}
	orderReadQuery[T]
}

{{- range $i, $col := .GetIndexNodes }}
type {{ $col.InterfaceName }}[T any] interface {
{{- range $col.Children }}
	And{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T]
	And{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T]
{{- end }}
	orderReadQuery[T]
}
{{ end }}

{{- range $i, $col := .GetIndexNodes }}
type {{ $col.StructName }}[T any] struct {
	*idxQuery[T]
}

{{- range $col.Children }}
func (q *{{$col.StructName}}[T]) And{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " and {{ $col.Name }} = ?"
	q.whereParams = append(q.whereParams, val)
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q.idxQuery
	{{- else }}
	return &{{ .StructName }}[T]{q.idxQuery}
	{{- end}}
}

func (q *{{$col.StructName}}[T]) And{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql += " and {{ $col.Name }} in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q.idxQuery
	{{- else }}
	return &{{ .StructName }}[T]{q.idxQuery}
	{{- end}}
}
{{ end }}
{{ end }}

// Find methods
func Select{{.ClassName}}() iQuery[{{.ClassName}}] {
	return new(idxQuery[{{.ClassName}}])
}

func Select[T any]() iQuery[T] {
	return new(idxQuery[T])
}

{{range $i, $col := .FirstIdxColumns }}
func (q *idxQuery[T]) Where{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql += " where {{ .Name }} = ?"
	q.whereParams = append(q.whereParams, val)
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q
	{{- else }}
	return &{{ .StructName }}[T]{q}
	{{- end}}
}

func (q *idxQuery[T]) Where{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " where {{ .Name }} in (" + coredb.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q
	{{- else }}
	return &{{ .StructName }}[T]{q}
	{{- end}}
}
{{ end }}

func (q *idxQuery[T]) GetWhere() (whereSql string, params []any) {
	var orderSql string
	if len(q.orders) > 0 {
		orderSql = " order by " + strings.Join(q.orders, ",")
	}
	return q.whereSql + orderSql + q.limitSql, q.whereParams
}
