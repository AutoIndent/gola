// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}

import "github.com/olachat/gola/corelib"

type orderBy int

type idxQuery[T any] struct {
	whereSql string
	orders []orderBy
	whereParams []interface{}
}

// order by enum & interface
const (
{{- range $i, $col := .Columns }}
	{{- if eq $i 0 }}
	{{$col.GoName}}Asc orderBy = iota
	{{$col.GoName}}Desc
	{{- else }}
	{{$col.GoName}}Asc
	{{$col.GoName}}Desc
	{{- end }}
{{- end }}
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) corelib.ReadQuery[T] {
	return q
}

func (q *idxQuery[T]) All() []*T {
	return nil
}

func (q *idxQuery[T]) Limit(limit, offset int) []*T {
	return nil
}

type order[T any] interface {
	OrderBy(args ...orderBy) corelib.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	corelib.ReadQuery[T]
}

type iQuery[T any] interface {
{{- range $i, $col := .FirstIdxColumns }}
	Where{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T]
	Where{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T]
{{- end }}
	orderReadQuery[T]
}

{{- range $i, $col := .GetIndexNodes }}
type {{ $col.InterfaceName }}[T any] interface {
{{- range $col.Children }}
	And{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T]
	And{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T]
{{- end }}
	orderReadQuery[T]
}
{{ end }}

{{- range $i, $col := .GetIndexNodes }}
type {{ $col.StructName }}[T any] struct {
	*idxQuery[T]
}

{{- range $col.Children }}
func (q *{{$col.StructName}}[T]) And{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " and {{ $col.Name }} = ?"
	q.whereParams = append(q.whereParams, val)
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q.idxQuery
	{{- else }}
	return &{{ .StructName }}[T]{q.idxQuery}
	{{- end}}
}

func (q *{{$col.StructName}}[T]) And{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " and {{ $col.Name }} in (" + corelib.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q.idxQuery
	{{- else }}
	return &{{ .StructName }}[T]{q.idxQuery}
	{{- end}}
}
{{ end }}
{{ end }}

// Find methods
func Select[T any]() iQuery[T] {
	return new(idxQuery[T])
}

{{range $i, $col := .FirstIdxColumns }}
func (q *idxQuery[T]) Where{{ .GoName }}EQ(val {{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " where {{ .Name }} = ?"
	q.whereParams = append(q.whereParams, val)
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q
	{{- else }}
	return &{{ .StructName }}[T]{q}
	{{- end}}
}

func (q *idxQuery[T]) Where{{ .GoName }}IN(vals ...{{ .GoType }}) {{ .InterfaceName }}[T] {
	q.whereSql = " where {{ .Name }} in (" + corelib.GetParamPlaceHolder(len(vals)) + ")"
	for _, val := range vals {
		q.whereParams = append(q.whereParams, val)
	}
	{{- if eq .InterfaceName "orderReadQuery" }}
	return q
	{{- else }}
	return &{{ .StructName }}[T]{q}
	{{- end}}
}
{{ end }}

func (q *idxQuery[T]) GetWhere() (whereSql string, params []interface{}) {
	return q.whereSql, q.whereParams
}
