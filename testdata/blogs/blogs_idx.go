// Code generated by gola 0.0.1; DO NOT EDIT.

package blogs

import "github.com/olachat/gola/corelib"

type orderBy int

type idxQuery[T any] struct {
}

// order by enum & interface
const (
	IdAsc orderBy = iota
	IdDesc
	UserIdAsc
	UserIdDesc
	SlugAsc
	SlugDesc
	TitleAsc
	TitleDesc
	CategoryIdAsc
	CategoryIdDesc
	IsPinnedAsc
	IsPinnedDesc
	IsVipAsc
	IsVipDesc
	CountryAsc
	CountryDesc
	CreatedAtAsc
	CreatedAtDesc
	UpdatedAtAsc
	UpdatedAtDesc
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) corelib.ReadQuery[T] {
	return q
}

func (q *idxQuery[T]) All() []*T {
	return nil
}

func (q *idxQuery[T]) Limit(limit, offset int) []*T {
	return nil
}

type order[T any] interface {
	OrderBy(args ...orderBy) corelib.ReadQuery[T]
}

type orderReadQuery[T any] interface {
	order[T]
	corelib.ReadQuery[T]
}

type iQuery[T any] interface {
	WhereCategoryIdEQ(val int) iQuery1[T]
	WhereCategoryIdIN(vals ...int) iQuery1[T]
	WhereCountryEQ(val string) iQuery4[T]
	WhereCountryIN(vals ...string) iQuery4[T]
	WhereSlugEQ(val string) orderReadQuery[T]
	WhereSlugIN(vals ...string) orderReadQuery[T]
	WhereUserIdEQ(val int) iQuery9[T]
	WhereUserIdIN(vals ...int) iQuery9[T]
	orderReadQuery[T]
}
type iQuery1[T any] interface {
	AndIsPinnedEQ(val int8) iQuery2[T]
	AndIsPinnedIN(vals ...int8) iQuery2[T]
	orderReadQuery[T]
}

type iQuery2[T any] interface {
	AndIsVipEQ(val int8) orderReadQuery[T]
	AndIsVipIN(vals ...int8) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery4[T any] interface {
	AndCategoryIdEQ(val int) iQuery5[T]
	AndCategoryIdIN(vals ...int) iQuery5[T]
	AndIsVipEQ(val int8) orderReadQuery[T]
	AndIsVipIN(vals ...int8) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery5[T any] interface {
	AndIsVipEQ(val int8) orderReadQuery[T]
	AndIsVipIN(vals ...int8) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery9[T any] interface {
	AndIsPinnedEQ(val int8) iQuery10[T]
	AndIsPinnedIN(vals ...int8) iQuery10[T]
	AndIsVipEQ(val int8) orderReadQuery[T]
	AndIsVipIN(vals ...int8) orderReadQuery[T]
	orderReadQuery[T]
}

type iQuery10[T any] interface {
	AndCategoryIdEQ(val int) orderReadQuery[T]
	AndCategoryIdIN(vals ...int) orderReadQuery[T]
	orderReadQuery[T]
}

type idxQuery1[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery1[T]) AndIsPinnedEQ(val int8) iQuery2[T] {
	return &idxQuery2[T]{q.idxQuery}
}

func (q *idxQuery1[T]) AndIsPinnedIN(vals ...int8) iQuery2[T] {
	return &idxQuery2[T]{q.idxQuery}
}

type idxQuery2[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery2[T]) AndIsVipEQ(val int8) orderReadQuery[T] {
	return q.idxQuery
}

func (q *idxQuery2[T]) AndIsVipIN(vals ...int8) orderReadQuery[T] {
	return q.idxQuery
}

type idxQuery4[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery4[T]) AndCategoryIdEQ(val int) iQuery5[T] {
	return &idxQuery5[T]{q.idxQuery}
}

func (q *idxQuery4[T]) AndCategoryIdIN(vals ...int) iQuery5[T] {
	return &idxQuery5[T]{q.idxQuery}
}

func (q *idxQuery4[T]) AndIsVipEQ(val int8) orderReadQuery[T] {
	return q.idxQuery
}

func (q *idxQuery4[T]) AndIsVipIN(vals ...int8) orderReadQuery[T] {
	return q.idxQuery
}

type idxQuery5[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery5[T]) AndIsVipEQ(val int8) orderReadQuery[T] {
	return q.idxQuery
}

func (q *idxQuery5[T]) AndIsVipIN(vals ...int8) orderReadQuery[T] {
	return q.idxQuery
}

type idxQuery9[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery9[T]) AndIsPinnedEQ(val int8) iQuery10[T] {
	return &idxQuery10[T]{q.idxQuery}
}

func (q *idxQuery9[T]) AndIsPinnedIN(vals ...int8) iQuery10[T] {
	return &idxQuery10[T]{q.idxQuery}
}

func (q *idxQuery9[T]) AndIsVipEQ(val int8) orderReadQuery[T] {
	return q.idxQuery
}

func (q *idxQuery9[T]) AndIsVipIN(vals ...int8) orderReadQuery[T] {
	return q.idxQuery
}

type idxQuery10[T any] struct {
	*idxQuery[T]
}

func (q *idxQuery10[T]) AndCategoryIdEQ(val int) orderReadQuery[T] {
	return q.idxQuery
}

func (q *idxQuery10[T]) AndCategoryIdIN(vals ...int) orderReadQuery[T] {
	return q.idxQuery
}

// Find methods
func Select[T any]() iQuery[T] {
	return new(idxQuery[T])
}

func (q *idxQuery[T]) WhereCategoryIdEQ(val int) iQuery1[T] {
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) WhereCategoryIdIN(vals ...int) iQuery1[T] {
	return &idxQuery1[T]{q}
}

func (q *idxQuery[T]) WhereCountryEQ(val string) iQuery4[T] {
	return &idxQuery4[T]{q}
}

func (q *idxQuery[T]) WhereCountryIN(vals ...string) iQuery4[T] {
	return &idxQuery4[T]{q}
}

func (q *idxQuery[T]) WhereSlugEQ(val string) orderReadQuery[T] {
	return q
}

func (q *idxQuery[T]) WhereSlugIN(vals ...string) orderReadQuery[T] {
	return q
}

func (q *idxQuery[T]) WhereUserIdEQ(val int) iQuery9[T] {
	return &idxQuery9[T]{q}
}

func (q *idxQuery[T]) WhereUserIdIN(vals ...int) iQuery9[T] {
	return &idxQuery9[T]{q}
}
