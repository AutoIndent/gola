// Code generated by gola 0.0.1; DO NOT EDIT.

package users

import (
	"database/sql"
	"fmt"
	"github.com/olachat/gola/corelib"
	"strings"
)

// User represents users table
type User struct {
	//  int
	Id
	// Name varchar(255)
	Name
	// Email address varchar(255)
	Email
	// Created Timestamp int unsigned
	CreatedAt
	// Updated Timestamp int unsigned
	UpdatedAt
	// float float
	FloatType
	// double double
	DoubleType
	// user hobby enum('swimming','running','singing')
	Hobby
	// user hobby enum('swimming','running','singing')
	HobbyNoDefault
	// user sports set('swim','tennis','basketball','football','squash','badminton')
	Sports
	// user sports set('swim','tennis','basketball','football','squash','badminton')
	Sports2
	// user sports set('swim','tennis','basketball','football','squash','badminton')
	SportsNoDefault
}

type UserTable struct{}

func (*UserTable) GetTableName() string {
	return "users"
}

var table *UserTable

// Fetch methods
func FetchUserById(id int) *User {
	return corelib.FetchById[User](id)
}

func FetchById[T any](id int) *T {
	return corelib.FetchById[T](id)
}

func FetchUserByIds(ids []int) []*User {
	return corelib.FetchByIds[User](ids)
}

func FetchByIds[T any](ids []int) []*T {
	return corelib.FetchByIds[T](ids)
}

// Column types
type UserHobby string

const (
	UserHobbySwimming UserHobby = "swimming"
	UserHobbyRunning  UserHobby = "running"
	UserHobbySinging  UserHobby = "singing"
)

type UserHobbyNoDefault string

const (
	UserHobbyNoDefaultSwimming UserHobbyNoDefault = "swimming"
	UserHobbyNoDefaultRunning  UserHobbyNoDefault = "running"
	UserHobbyNoDefaultSinging  UserHobbyNoDefault = "singing"
)

type UserSports string

const (
	UserSportsSwim       UserSports = "swim"
	UserSportsTennis     UserSports = "tennis"
	UserSportsBasketball UserSports = "basketball"
	UserSportsFootball   UserSports = "football"
	UserSportsSquash     UserSports = "squash"
	UserSportsBadminton  UserSports = "badminton"
)

type UserSports2 string

const (
	UserSports2Swim       UserSports2 = "swim"
	UserSports2Tennis     UserSports2 = "tennis"
	UserSports2Basketball UserSports2 = "basketball"
	UserSports2Football   UserSports2 = "football"
	UserSports2Squash     UserSports2 = "squash"
	UserSports2Badminton  UserSports2 = "badminton"
)

type UserSportsNoDefault string

const (
	UserSportsNoDefaultSwim       UserSportsNoDefault = "swim"
	UserSportsNoDefaultTennis     UserSportsNoDefault = "tennis"
	UserSportsNoDefaultBasketball UserSportsNoDefault = "basketball"
	UserSportsNoDefaultFootball   UserSportsNoDefault = "football"
	UserSportsNoDefaultSquash     UserSportsNoDefault = "squash"
	UserSportsNoDefaultBadminton  UserSportsNoDefault = "badminton"
)

// Id field
//
type Id struct {
	val int
}

func (c *Id) GetId() int {
	return c.val
}

func (c *Id) SetId(val int) {
	c.val = val
}

func (c *Id) GetColumnName() string {
	return "id"
}

func (c *Id) IsPrimaryKey() bool {
	return true
}

func (c *Id) GetValPointer() interface{} {
	return &c.val
}

func (c *Id) GetTableType() corelib.TableType {
	return table
}

// Name field
// Name
type Name struct {
	val string
}

func (c *Name) GetName() string {
	return c.val
}

func (c *Name) SetName(val string) {
	c.val = val
}

func (c *Name) GetColumnName() string {
	return "name"
}

func (c *Name) IsPrimaryKey() bool {
	return false
}

func (c *Name) GetValPointer() interface{} {
	return &c.val
}

func (c *Name) GetTableType() corelib.TableType {
	return table
}

// Email field
// Email address
type Email struct {
	val string
}

func (c *Email) GetEmail() string {
	return c.val
}

func (c *Email) SetEmail(val string) {
	c.val = val
}

func (c *Email) GetColumnName() string {
	return "email"
}

func (c *Email) IsPrimaryKey() bool {
	return false
}

func (c *Email) GetValPointer() interface{} {
	return &c.val
}

func (c *Email) GetTableType() corelib.TableType {
	return table
}

// CreatedAt field
// Created Timestamp
type CreatedAt struct {
	val uint
}

func (c *CreatedAt) GetCreatedAt() uint {
	return c.val
}

func (c *CreatedAt) SetCreatedAt(val uint) {
	c.val = val
}

func (c *CreatedAt) GetColumnName() string {
	return "created_at"
}

func (c *CreatedAt) IsPrimaryKey() bool {
	return false
}

func (c *CreatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *CreatedAt) GetTableType() corelib.TableType {
	return table
}

// UpdatedAt field
// Updated Timestamp
type UpdatedAt struct {
	val uint
}

func (c *UpdatedAt) GetUpdatedAt() uint {
	return c.val
}

func (c *UpdatedAt) SetUpdatedAt(val uint) {
	c.val = val
}

func (c *UpdatedAt) GetColumnName() string {
	return "updated_at"
}

func (c *UpdatedAt) IsPrimaryKey() bool {
	return false
}

func (c *UpdatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *UpdatedAt) GetTableType() corelib.TableType {
	return table
}

// FloatType field
// float
type FloatType struct {
	val float32
}

func (c *FloatType) GetFloatType() float32 {
	return c.val
}

func (c *FloatType) SetFloatType(val float32) {
	c.val = val
}

func (c *FloatType) GetColumnName() string {
	return "float_type"
}

func (c *FloatType) IsPrimaryKey() bool {
	return false
}

func (c *FloatType) GetValPointer() interface{} {
	return &c.val
}

func (c *FloatType) GetTableType() corelib.TableType {
	return table
}

// DoubleType field
// double
type DoubleType struct {
	val float64
}

func (c *DoubleType) GetDoubleType() float64 {
	return c.val
}

func (c *DoubleType) SetDoubleType(val float64) {
	c.val = val
}

func (c *DoubleType) GetColumnName() string {
	return "double_type"
}

func (c *DoubleType) IsPrimaryKey() bool {
	return false
}

func (c *DoubleType) GetValPointer() interface{} {
	return &c.val
}

func (c *DoubleType) GetTableType() corelib.TableType {
	return table
}

// Hobby field
// user hobby
type Hobby struct {
	val UserHobby
}

func (c *Hobby) GetHobby() UserHobby {
	return c.val
}

func (c *Hobby) SetHobby(val UserHobby) {
	c.val = val
}

func (c *Hobby) GetColumnName() string {
	return "hobby"
}

func (c *Hobby) IsPrimaryKey() bool {
	return false
}

func (c *Hobby) GetValPointer() interface{} {
	return &c.val
}

func (c *Hobby) GetTableType() corelib.TableType {
	return table
}

// HobbyNoDefault field
// user hobby
type HobbyNoDefault struct {
	val UserHobbyNoDefault
}

func (c *HobbyNoDefault) GetHobbyNoDefault() UserHobbyNoDefault {
	return c.val
}

func (c *HobbyNoDefault) SetHobbyNoDefault(val UserHobbyNoDefault) {
	c.val = val
}

func (c *HobbyNoDefault) GetColumnName() string {
	return "hobby_no_default"
}

func (c *HobbyNoDefault) IsPrimaryKey() bool {
	return false
}

func (c *HobbyNoDefault) GetValPointer() interface{} {
	return &c.val
}

func (c *HobbyNoDefault) GetTableType() corelib.TableType {
	return table
}

// Sports field
// user sports
type Sports struct {
	val string
}

func (c *Sports) GetSports() []UserSports {
	strSlice := strings.Split(c.val, ",")
	valSlice := make([]UserSports, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, UserSports(strings.ToLower(s)))
	}
	return valSlice
}

func (c *Sports) SetSports(val []UserSports) {
	strSlice := make([]string, 0, len(val))
	for _, v := range val {
		strSlice = append(strSlice, string(v))
	}
	c.val = strings.Join(strSlice, ",")
}

func (c *Sports) GetColumnName() string {
	return "sports"
}

func (c *Sports) IsPrimaryKey() bool {
	return false
}

func (c *Sports) GetValPointer() interface{} {
	return &c.val
}

func (c *Sports) GetTableType() corelib.TableType {
	return table
}

// Sports2 field
// user sports
type Sports2 struct {
	val string
}

func (c *Sports2) GetSports2() []UserSports2 {
	strSlice := strings.Split(c.val, ",")
	valSlice := make([]UserSports2, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, UserSports2(strings.ToLower(s)))
	}
	return valSlice
}

func (c *Sports2) SetSports2(val []UserSports2) {
	strSlice := make([]string, 0, len(val))
	for _, v := range val {
		strSlice = append(strSlice, string(v))
	}
	c.val = strings.Join(strSlice, ",")
}

func (c *Sports2) GetColumnName() string {
	return "sports2"
}

func (c *Sports2) IsPrimaryKey() bool {
	return false
}

func (c *Sports2) GetValPointer() interface{} {
	return &c.val
}

func (c *Sports2) GetTableType() corelib.TableType {
	return table
}

// SportsNoDefault field
// user sports
type SportsNoDefault struct {
	val string
}

func (c *SportsNoDefault) GetSportsNoDefault() []UserSportsNoDefault {
	strSlice := strings.Split(c.val, ",")
	valSlice := make([]UserSportsNoDefault, 0, len(strSlice))
	for _, s := range strSlice {
		valSlice = append(valSlice, UserSportsNoDefault(strings.ToLower(s)))
	}
	return valSlice
}

func (c *SportsNoDefault) SetSportsNoDefault(val []UserSportsNoDefault) {
	strSlice := make([]string, 0, len(val))
	for _, v := range val {
		strSlice = append(strSlice, string(v))
	}
	c.val = strings.Join(strSlice, ",")
}

func (c *SportsNoDefault) GetColumnName() string {
	return "sports_no_default"
}

func (c *SportsNoDefault) IsPrimaryKey() bool {
	return false
}

func (c *SportsNoDefault) GetValPointer() interface{} {
	return &c.val
}

func (c *SportsNoDefault) GetTableType() corelib.TableType {
	return table
}

func NewUser() *User {
	return &User{
		Id{},
		Name{val: ""},
		Email{val: ""},
		CreatedAt{val: uint(0)},
		UpdatedAt{val: uint(0)},
		FloatType{val: float32(0)},
		DoubleType{val: float64(0)},
		Hobby{val: "swimming"},
		HobbyNoDefault{},
		Sports{val: "swim,football"},
		Sports2{val: "swim,football"},
		SportsNoDefault{},
	}
}

func (c *User) Insert() (sql.Result, error) {
	tableName, columnNames := corelib.GetTableAndColumnsNames[User]()
	sql := `INSERT INTO ` + tableName + ` (` + columnNames + `) value (`
	values := make([]string, 0)
	values = append(values, fmt.Sprintf("%v", c.GetId()))
	values = append(values, fmt.Sprintf("%v", c.GetName()))
	values = append(values, fmt.Sprintf("%v", c.GetEmail()))
	values = append(values, fmt.Sprintf("%v", c.GetCreatedAt()))
	values = append(values, fmt.Sprintf("%v", c.GetUpdatedAt()))
	values = append(values, fmt.Sprintf("%v", c.GetFloatType()))
	values = append(values, fmt.Sprintf("%v", c.GetDoubleType()))
	values = append(values, fmt.Sprintf("%v", c.GetHobby()))
	values = append(values, fmt.Sprintf("%v", c.GetHobbyNoDefault()))
	values = append(values, fmt.Sprintf("%v", c.GetSports()))
	values = append(values, fmt.Sprintf("%v", c.GetSports2()))
	values = append(values, fmt.Sprintf("%v", c.GetSportsNoDefault()))
	sql += strings.Join(values, ",") + `)`
	return corelib.Exec[User](sql)
}
