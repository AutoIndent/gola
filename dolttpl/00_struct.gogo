// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}
{{$table := .}}
import (
	sqle "github.com/dolthub/go-mysql-server"

	"github.com/dolthub/go-mysql-server/memory"
	"github.com/dolthub/go-mysql-server/sql"
	{{.Imports}}
)
{{- range .SqlColumns }}
	{{- if .IsEnum}}
type {{$table.ClassName}}{{.GoName}} string
const (
	{{.GetEnumConst}}
)
	{{- end }}
{{- end }}

// {{.ClassName}} represent a row in {{.Name}} table
type {{.ClassName}} struct {
	{{- range .SqlColumns }}
	// {{.Comment}} {{.DBType}}
	{{.GoName}} {{.GoType}} `json:"{{.Name}}"`
	{{- end }}
}

func New{{.ClassName}}() *{{.ClassName}} {
	return &{{.ClassName}}{
	{{- range .SqlColumns }}
	{{- if .HasDefault}}
	{{.GoName}}: {{.GoDefaultValue}},
	{{- end }}
	{{- end }}
	}
}

func (o *{{.ClassName}}) Save(engine *sqle.Engine) error {
	idb, _ := engine.Catalog.Database("{{.Package}}")
	db := idb.(*memory.Database)

	t := db.Tables()["{{.Name}}"].(*memory.Table)
	ctx := sql.NewEmptyContext()
	return t.Insert(ctx, sql.NewRow(
	{{- range .SqlColumns }}
	{{- if .IsEnum}}
	string(o.{{.GoName}}),
	{{- else}}
	o.{{.GoName}},
	{{- end }}
	{{- end }}
	))
}

// Add{{.ClassName}}Table adds {{.ClassName}} table to given db
func Add{{.ClassName}}Table(db *memory.Database) {
	tableName := "{{.Name}}"

	{{- range .SqlColumns }}
	{{- if .HasDefault}}
	default{{.GoName}}, _ := sql.NewColumnDefaultValue(expression.NewLiteral({{.GoDefaultValue}}, {{.SQLType}}), {{.SQLType}}, true, false)
	{{- end}}
	{{- end }}

	t := memory.NewTable(tableName, sql.Schema{
	{{- range .SqlColumns }}
		{Name: "{{.Name}}", Type: {{.SQLType}}, Nullable: {{.IsNullable}}, Source: "{{$table.Name}}",
			AutoIncrement: {{.IsAutoIncrement}}, Comment: "{{.Comment}}", PrimaryKey: {{.IsPrimaryKey}} {{.GetColumnDefault}}},
	{{- end }}
	})
	db.AddTable(tableName, t)
}
