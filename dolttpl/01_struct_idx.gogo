// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}

import "github.com/olachat/gola/corelib"

type orderBy int

type idxQuery[T any] struct {
}

// order by enum & interface
const (
{{- range $i, $col := .Columns }}
	{{- if eq $i 0 }}
	{{$col.GoName}}Asc orderBy = iota
	{{$col.GoName}}Desc
	{{- else }}
	{{$col.GoName}}Asc
	{{$col.GoName}}Desc
	{{- end }}
{{- end }}
)

func (q *idxQuery[T]) OrderBy(args ...orderBy) corelib.ReadQuery[T] {
	return q
}

type order[T any] interface {
	OrderBy(args ...orderBy) corelib.ReadQuery[T]
}

type iQuery1[T any] interface {
{{- range $i, $col := .FirstIdxColumns }}
	Where{{ .GoName }}EQ(val {{ .GoType }}) idxQuery[T]
	Where{{ .GoName }}IN(vals ...{{ .GoType }}) idxQuery[T]
{{- end }}
	order[T]
	corelib.ReadQuery[T]
}

// Find methods
func Select[T any]() iQuery1[T] {
	return new(idxQuery[T])
}

{{- range $i, $col := .FirstIdxColumns }}
func (q *idxQuery[T]) Where{{ .GoName }}EQ(val {{ .GoType }}) idxQuery[T] {
	return q
}

func (q *idxQuery[T]) Where{{ .GoName }}IN(vals ...{{ .GoType }}) idxQuery[T] {
	return q
}
{{ end }}
